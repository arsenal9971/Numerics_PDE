# coding=utf-8
###-----------------------------------------------------------###
###  Name: HÃ©ctor Andrade Loarca                              ###
###  Course: Numerics of PDEs                                 ###
###  Professor: Kersten Schmidt                               ###
###                                                           ###
###             Script that Produces the plots                ###
###                  in 3f) and 3h)                           ###
###                                                           ###
###-----------------------------------------------------------###

# First call the module meshes.py

import meshes as msh
import numpy as np 
import matplotlib.pyplot as plt

# Get the p and t arrays for the file of unstructured mesh of the square
# generated by gmsh
file='square_mesh.msh'
mesh1=msh.read_gmsh(file)
p1=mesh1[0]
t1=mesh1[1]
#Name of the file of the output plot 
file='unstructured.png'
title='Unstructured mesh'
msh.show(p1,t1,file,title)

# Get the p and t arrays for the regular mesh of the square of side 1
# For structured meshes the value of h0 is not arbitrary, as it has to fit
# a integer number of 1-dimensional elements in each border, the closest 
# h0 to 0.01 that fullfill that is h0=np.sqrt(2)/14=0.10101....
a=1
h0=np.sqrt(2)/14
mesh2=msh.grid_square(a,h0)
p2=mesh2[0]
t2=mesh2[1]
#Name of the file of the output plot 
file='regular.png'
title='Regular mesh'
msh.show(p2,t2,file,title)


# Lets plot the number of nodes depending on maximal mesh width for the 
# unstructured mesh generated by gmsh, all of them are meshes for a square of side length a=1, and 
# the value of maximal width will be varied in gmsh in 6 different values:

# Lets put in an array yu the number of nodes for each h0
# and xu for the actual mesh width calculated with max_mesh_width

xu=[]
yu=[]

# 1.- h0=np.sqrt(2)/5=0.28284271247461901...
file='square_mesh1.msh'
mesh=msh.read_gmsh(file)
p=mesh[0]
t=mesh[1]

xu.append(msh.max_mesh_width(p,t))
yu.append(len(p))

# 2.- h0=np.sqrt(2)/14=0.10101525445522108...
file='square_mesh2.msh'
mesh=msh.read_gmsh(file)
p=mesh[0]
t=mesh[1]

xu.append(msh.max_mesh_width(p,t))
yu.append(len(p))

# 3.- h0=np.sqrt(2)/25= 0.056568542494923803...
file='square_mesh3.msh'
mesh=msh.read_gmsh(file)
p=mesh[0]
t=mesh[1]

xu.append(msh.max_mesh_width(p,t))
yu.append(len(p))

# 4.- h0=np.sqrt(2)/35=0.040406101782088436...
file='square_mesh4.msh'
mesh=msh.read_gmsh(file)
p=mesh[0]
t=mesh[1]

xu.append(msh.max_mesh_width(p,t))
yu.append(len(p))

# 5.- h0=np.sqrt(2)/45=0.031426968052735448...
file='square_mesh5.msh'
mesh=msh.read_gmsh(file)
p=mesh[0]
t=mesh[1]

xu.append(msh.max_mesh_width(p,t))
yu.append(len(p))

# 6.- h0=np.sqrt(2)/55=0.025712973861329001...
file='square_mesh6.msh'
mesh=msh.read_gmsh(file)
p=mesh[0]
t=mesh[1]

xu.append(msh.max_mesh_width(p,t))
yu.append(len(p))

#Now we plotted and save the image
plt.plot(xu,yu)
plt.title("Number of nodes vs. maximal width \n Unstructured mesh")
plt.xlabel("Actual maximal mesh (h0)")
plt.ylabel("Number of nodes")
plt.savefig("Nodesh0unstruct.png")
plt.close()

# Now we plot the number of nodes depending on the actual maximal width of the
# regular mesh generated by the function grid_square, and we put it in 
# arrays yr for number of nodes and xr for the maximal width

xr=[]
yr=[]
a=1

# 1.- h0=np.sqrt(2)/5=0.28284271247461901...
h0=np.sqrt(2)/5
mesh=msh.grid_square(a,h0)
p=mesh[0]
t=mesh[1]
xr.append(msh.max_mesh_width(p,t))
yr.append(len(p))

# 2.- h0=np.sqrt(2)/14=np.sqrt(2)/14.
h0=np.sqrt(2)/14
mesh=msh.grid_square(a,h0)
p=mesh[0]
t=mesh[1]
xr.append(msh.max_mesh_width(p,t))
yr.append(len(p))

# 3.- h0=np.sqrt(2)/25= 0.056568542494923803...
h0=np.sqrt(2)/25
mesh=msh.grid_square(a,h0)
p=mesh[0]
t=mesh[1]
xr.append(msh.max_mesh_width(p,t))
yr.append(len(p))

# 4.- h0=np.sqrt(2)/35=0.040406101782088436...
h0=np.sqrt(2)/35
mesh=msh.grid_square(a,h0)
p=mesh[0]
t=mesh[1]
xr.append(msh.max_mesh_width(p,t))
yr.append(len(p))

# 5.- h0=np.sqrt(2)/45=0.031426968052735448...
h0=np.sqrt(2)/45
mesh=msh.grid_square(a,h0)
p=mesh[0]
t=mesh[1]
xr.append(msh.max_mesh_width(p,t))
yr.append(len(p))

# 6.- h0=np.sqrt(2)/55=0.025712973861329001...
h0=np.sqrt(2)/55
mesh=msh.grid_square(a,h0)
p=mesh[0]
t=mesh[1]
xr.append(msh.max_mesh_width(p,t))
yr.append(len(p))

#Now we plotted and save the image
plt.plot(xr,yr)
plt.title("Number of nodes vs. maximal width \n regular mesh")
plt.xlabel("Actual maximal mesh (h0)")
plt.ylabel("Number of nodes")
plt.savefig("Nodesh0regul.png")
plt.close()